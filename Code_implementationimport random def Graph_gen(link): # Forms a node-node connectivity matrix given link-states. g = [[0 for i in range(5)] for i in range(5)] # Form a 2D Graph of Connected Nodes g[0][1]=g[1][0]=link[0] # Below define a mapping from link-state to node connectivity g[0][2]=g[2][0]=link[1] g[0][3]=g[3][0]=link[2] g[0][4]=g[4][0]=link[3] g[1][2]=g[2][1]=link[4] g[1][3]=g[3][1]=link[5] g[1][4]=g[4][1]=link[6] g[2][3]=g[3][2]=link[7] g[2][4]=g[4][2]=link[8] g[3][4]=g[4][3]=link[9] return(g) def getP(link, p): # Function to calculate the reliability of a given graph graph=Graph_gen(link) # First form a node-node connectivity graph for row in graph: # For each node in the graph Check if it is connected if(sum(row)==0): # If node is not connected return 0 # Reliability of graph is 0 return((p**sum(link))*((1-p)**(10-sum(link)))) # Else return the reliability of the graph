import random
def Graph_gen(link): 
matrix given link-states.
g = [[0 for i in range(5)] for i in range(5)] 
Nodes
g[0][1]=g[1][0]=link[0] 
link-state to node connectivity
g[0][2]=g[2][0]=link[1]
g[0][3]=g[3][0]=link[2]
g[0][4]=g[4][0]=link[3]
g[1][2]=g[2][1]=link[4]
g[1][3]=g[3][1]=link[5]
g[1][4]=g[4][1]=link[6]
g[2][3]=g[3][2]=link[7]
g[2][4]=g[4][2]=link[8]
g[3][4]=g[4][3]=link[9]
return(g)
def getP(link, p): 
reliability of a given graph
graph=Graph_gen(link) 
connectivity graph
for row in graph: 
Check if it is connected
if(sum(row)==0): 
return 
return((p**sum(link))*((1-p)**(10-sum(link))))

the graph

def calcReliability(exh_links, p): 
exhaustive enumerated graph
reliability=0 
for link in exh_links:
reliability += getP(link,p) 
graph as sum of products
return reliability 
def getConnectedGraphs(exh_links, p): 
connected graphs from exhaustive list
global connected_graphs
for i in range(1024):
graphs
if(getP(exh_links[i],p)!=0):
connected_graphs.append(i) 
list of connected_graphs
def flip(rows_to_flip): 
given graph
global exhaustive_links
for row in rows_to_flip: 
graphs
exhaustive_links[row]=[(exhaustive_links[row][i]+1)%2
Flips the links in graph
connected_graphs =[]
comb=0
exhaustive_links=[[0 for i in range(10)] for i in range(1024)]# Initialize the
exhaustive graph list
for a in range(2):
for b in range(2):
for c in range(2):
for d in range(2):
for e in range(2):
for f in range(2):
for g in range(2):
for h in range(2):
for i in range(2):
for j in range(2): 
exhaustive_links[comb]=[a,b,c,d,e,f,g,h,i,j]
for i in range(10)] 
comb+=1
reliability = [0 for i in range(26)] 
getConnectedGraphs(exhaustive_links, 0.5) 
print("P\tReliability")
for p in range(0,26): 
increments of 0.025
reliability[p] =
calcReliability(exhaustive_links,p*0.04)
print(str(p*0.04)+" "+str(reliability[p]))
reliability for a given p
new_reliability=[0 for i in range(31)] 
no_of_monte_carlo_simulation = 100; 
average out the random variation
print("K\tNew Reliability")

for k in range(31): 
flipped
for i in range(no_of_monte_carlo_simulation):
simulation
rows_to_be_flipped=random.sample(connected_graphs,k)

graphs
flip(rows_to_be_flipped)
new_reliability[k]+=calcReliability(exhaustive_links,
0.9)/no_of_monte_carlo_simulation 
flip(rows_to_be_flipped) 
if(new_reliability[k]>1): 
new_reliability[k]=1
break
print(str(k)+"\t"+str(new_reliability[k]))

calculated
print("K\tChange in Reliability")
for i in range(31): 
compared to the original graph 23 index of the original calculated reliablity
print(str(i)+"\t"+str(abs(new_reliability[i]-reliability[23])))
